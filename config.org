:PROPERTIES:
:ID:       14656706-44e8-4d66-b966-f948a7b85dac
:END:
#+title: My (Doom) Emacs Config
#+author: Mateo Barria-Urenda
#+PROPERTY: header-args :comments

* About
This is my Doom Emacs configuration.

I've separatated this file in three main sections, to correspond to Doom's three config files: [[file:init.el]] ([[Modules]]), [[file:config.el]] ([[Config]]), and [[file:packages.el]] ([[Packages]]).
However, these don't correspond one-to-one. [[Config]] consists mostly of changes to stuff included in Doom Emacs (such as configuration of the enabled modules), while [[Packages]] corresponds to installation and configuration of packages not included in Doom modules.

** Why Emacs?

There's a lot of reasons to use Emacs, but most of the ones that matter to me can be grouped as "Unifying my work flow"
- Whether I'm working with Python, LaTeX, or simple text files; I can always use the same keybinds to move around and make changes.
- Whenever I change computers (like between my work computer and my personal computers), I can just use sync my config with git (currently to github).
- Continuing the previous point, if I want access to all my agenda files, I just need to install Dropbox.
** Prerequisites
This list might be incomplete. Remember to always run ~doom doctor~ after syncing and/or upgrading Doom Emacs.

| Prereq     | Description                 | Required by                                |
|------------+-----------------------------+--------------------------------------------|
| [[https://commitmono.com/][CommitMono]] | A really nice font.         | My config for doom-font                    |
| [[https://github.com/Nukesor/pueue][pueue]]      | A simple queue for commands | pueue package, to interface with the queue |
** Initializing/changing config files
We tangle some comments to each config file.

#+begin_src elisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

#+end_src

#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

#+end_src

#+begin_src elisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

#+end_src

Modifications to [[init.el]] won't take effect until ~doom sync~ is run.
But changes to [[config.el]] and to [[packages.el]] can be applied by reloading the config (~doom/reload~, bound to ~SPC h r r~).

** On installing additional packages in Doom
New packages must be declared in [[file:packages.el]], and if they are in MELPA, ELPA, or emacsmirror they can be installed with ~package!~.

#+begin_example elisp
(package! some-package)
#+end_example

By specifying a ~:recipe~, you can install fom a github repo.

#+begin_example elisp
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_example

The recipe will look for a ~PACKAGENAME.el~ file in the project root. If it's not called that of if it's in a subdirectory, it can be specified with ~:files~ (within ~:recipe~).

#+begin_example elisp
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_example

Included packages can also be disabled, though so far I've had no need of this.

#+begin_example elisp
(package! builtin-package :disable t)
#+end_example

Packages can also be overriden while keeping the ~:recipe~ (either from Doom or MELPA/ELPA/emacsmirror)

#+begin_example elisp
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_example

It's also possible to specify a branch or a specific commit.

#+begin_example
(package! builtin-package :recipe (:branch "develop"))
(package! builtin-package :pin "1a2b3c4d5e")
#+end_example

Or to unpin a package, multiple packages, or even all packages (not recommended) to use their latest version.

#+begin_example
(unpin! pinned-package)
(unpin! pinned-package another-pinned-package)
(unpin! t)
#+end_example

** On configuring installed packages.
This is totally copy pasted from the default config.el comments.

#+begin_quote
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
#+end_quote

* Modules

** Preface

Doom modules are loaded in ~init.el~.

We can get information on any of them from Doom using ~doom/help-modules~ (~SPC h d m~), or at point with ~+lookup/documentation~ (~K~).

Any changes to this won't take effect until ~doom sync~ is run.

We start by calling doom

#+begin_src elisp :tangle init.el
(doom!
#+end_src

** :input

Doom has input modules to accomodate other languages and keyboards; I don't use any of them.

** :completion

For completion at point I use [[https://company-mode.github.io/][company-mode]], and for completion of commands (searching commands, files, directories, etc) I use [[https://github.com/minad/vertico][vertico]].

#+begin_src elisp :tangle init.el
       :completion
       (company +childframe)           ; the ultimate code completion backend
       (vertico +icons +childframe)    ; the search engine of the future

#+end_src

I do not make any further changes to configuration for these modules, but it is important to keep in mind which you have enabled, as they affect many other modules.
Doom also provides modules for [[https://emacs-helm.github.io/helm/][Helm]], [[https://www.gnu.org/software/emacs/manual/html_mono/ido.html][Ido (Interactive Do)]], and [[https://github.com/abo-abo/swiper][Ivy]].

** :ui

We use several of the doom ui modules. These all work great to make Emacs fell more modern.

#+begin_src elisp :tangle init.el
       :ui
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       modeline          ; snazzy, Atom-inspired modeline, plus API
       workspaces        ; tab emulation, persistence & separate workspaces
#+end_src

Doom by itself has great window navigation (under the ~SPC w~ leader),but the ~window-select~ module makes it even better.

#+begin_src elisp :tangle init.el
       (window-select +numbers)     ; visually switch windows
#+end_src

It also provides some other small tweaks to ui that I really like.
#+begin_src elisp :tangle init.el
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       indent-guides     ; highlighted indent columns
       ophints           ; highlight the region an operation acts on
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       nav-flash         ; blink cursor line after big motions
#+end_src

Doom also has a module for ligatures, though it requires the use of a compatible font. (TODO: Link to furthr config)

#+begin_src elisp :tangle init.el
       (ligatures +extra)         ; ligatures and symbols to make your code pretty again
#+end_src

And it provides a module for [[https://github.com/Alexander-Miller/treemacs][treemacs.]]  With configuration for language server protocol compatibility. (Alternatively, there's a module for [[https://github.com/jaypei/emacs-neotree][neotree]])
#+begin_src elisp :tangle init.el
       (treemacs +lsp)          ; a project drawer, like neotree but cooler

#+end_src

It should be noted that Doom also provides modules for [[https://jblevins.org/projects/deft/][deft]], emoji support, better unicode support, a quit-message prompt, a minimap, and a zen mode.

** :editor
Of course, we use evil-mode in Doom.
#+begin_src elisp :tangle init.el
       :editor
       (evil +everywhere); come to the dark side, we have cookies
#+end_src

There's modules that help with editing in any language, programming or otherwise.
#+begin_src elisp :tangle init.el
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       multiple-cursors  ; editing in many places at once
       rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent
#+end_src
For the fold module, note that some useful default bindings are:

| binding | action                    |
|---------+---------------------------|
| ~z a~   | Open/close fold           |
| ~z p~   | Close fold                |
| ~z o~   | Open fold                 |
| ~z j~   | Previous fold             |
| ~z k~   | Next fold                 |
| ~z m~   | Change fold level of area |
| ~z M~   | Close all folds           |
| ~z R~   | Open all folds            |

And there's some modules for programming (Lisp in particular), that I haven't played around with yet, but I'll keep in my config as "somday" comments.
#+begin_src elisp :tangle init.el
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of

#+end_src
** :emacs
Doom provides some modules that enhance the vanila emacs experience. I'm all for them.
#+begin_src elisp :tangle init.el
       :emacs
       (dired +icons +dirvish)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

#+end_src

** :term
Doom provides modules for four terminals, [[eshell][eshell]] (built-in elisp shell),  a simple repl shell (the ~shell~ module), term (with multi-term), and vterm (the best option).
#+begin_src elisp :tangle init.el
       :term
       vterm             ; the best terminal emulation in Emacs

#+end_src
** :checkers
The doom spell/syntax checkers all work really well. Writegood mode (installed by ~:checkers grammar~) can be a bit annoying when writing formally, but it does no harm to have it activated.
#+begin_src elisp :tangle init.el
       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

#+end_src
** TODO :tools
Doom has a bunch of modules under ~:tools~ that are really useful.
Biblio allows for better bibliography management.
#+begin_src elisp :tangle init.el
       :tools
       biblio                ; Writes a PhD for you (citation needed)
       editorconfig          ; let someone else argue about tabs vs spaces
       ein                   ; tame Jupyter notebooks with emacs
       (eval +overlay)       ; run code, run (also, repls)
       (lookup +dictionary)  ; navigate your code and its documentation
       lsp                   ; M-x vscode
       magit                 ; a git porcelain for Emacs
       make                  ; run make tasks from Emacs
       (pass +pass)          ; password manager for nerds
       pdf                   ; pdf enhancements
       rgb                   ; creating color strings
       tmux                  ; an API for interacting with tmux
       tree-sitter
       upload                ; map local to remote projects via ssh/ftp

#+end_src

(Note: Eval can be called with ~gr~ on a region)

Doom also provides modules for [[https://www.ansible.com/][Ansible]], debugging, [[https://direnv.net/][direnv]], [[https://www.docker.com/][Docker]], [[https://github.com/rejeep/prodigy.el][prodigy]], [[https://www.terraform.io/][Terraform]]
** :os
Here we just activate ~tty~ module for better terminal experience. There's also a module to improve the MacOS experience; but I don't use Apple products.
#+begin_src elisp :tangle init.el
       :os
       tty               ; improve the terminal Emacs experience

#+end_src
** :lang
Doom has modules to help set it up as an IDE for a variety of programming languages.
Here are the ones I have enabled; the ~+lsp~ and ~+tree-sitter~ options are common and just enable integration with the respective modules.
#+begin_src elisp :tangle init.el
       :lang
       (cc +lsp +tree-stitter)         ; C > C++ == 1
       emacs-lisp        ; drown in parentheses
       (julia +lsp +tree-sitter)             ; a better, faster MATLAB
       (latex +latexmk +cdlatex +lsp +fold)             ; writing papers in Emacs has never been so fun
       (nix +tree-sitter)               ; I hereby declare "nix geht mehr!"
       (python +lsp +tree-sitter +pyenv)           ; beautiful is better than ugly
       (sh +lsp)               ; she sells {ba,z,fi}sh shells on the C xor
       data              ; config/data formats
#+end_src

There's also support for simple text formats (not exactly programming languages, but quite powerfull in their own right).
#+begin_src elisp :tangle init.el
       ledger            ; be audit you can be
       markdown          ; writing docs for people to ignore
#+end_src
Org-mode in particular deserves some attention, as it has many more options.
#+begin_src elisp :tangle init.el
       (org                ; organize your plain life in plain text
            +pretty        ; prettier defaults
            +dragndrop     ; drag images to org files
            +gnnuplot      ; Render images from gnuplot / plot org-tables
            +org-noter     ; Take notes of documents
            +hugo          ; Use Hugo to export websites
            +present       ; Use org-mode for presentations
            +roam2         ; A Zettelkasten for Emacs
            +pomodoro)     ; Use org-mode timers for productivity
#+end_src


Finally, a (commented) list of languages I don't use, as it might be useful in the future.
#+begin_src elisp :tangle init.el
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;kotlin            ; a better, slicker Java(Script)
       ;;lean              ; for folks with too much to prove
       ;;lua               ; one-based indices? one-based indices
       ;;nim               ; python + lisp at the speed of c
       ;;ocaml             ; an objective camel
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

#+end_src
** :email
For email we use mu (with mu4e).
#+begin_src elisp :tangle init.el
       :email
       (mu4e +org +gmail)
#+end_src
There's also a module for [[https://www.emacswiki.org/emacs/NotMuch][NotMuch]] and another for [[https://www.emacswiki.org/emacs/WanderLust][Wanderlust]]. I didn't like NotMuch much, and as of writing, there's basically no documentation for the wanderlust module.
** :app
Doom has a few apps.

Calendar requires an OAuth client ID. TODO: Configure gmail; see also the :email modules.
Everywhere configures [[https://github.com/tecosaur/emacs-everywhere][Emacs Everywhere.]]
And rss adds an rss feed, of course.

#+begin_src elisp :tangle init.el
       :app
       calendar
       everywhere        ; *leave* Emacs!? You must be joking
       (rss +org)        ; emacs as an RSS reader
#+end_src
There's also a module for music plaing (emms) and one for IRC.
** :config
Some meta modules that affect the config itself. Obviously this is a literate config, so it benefits from ~literate~ (Though I still tangle manually, since I tangle to [[file:init.el]]). ~default~ adds a lot of really nice keybinds (inspired by [[https://www.spacemacs.org/][Spacemacs]])
#+begin_src elisp :tangle init.el
       :config
       literate
       (default +bindings +smartparens)
#+end_src
** End

We finish by closing the doom! list.

#+begin_src elisp :tangle init.el
)
#+end_src

Could've done so in the last module, but didn't want to keep track of that if it happens to change.

* Config

** On package reconfiguration...

Since Doom configures a bunch of stuff, it's important to use ~after!~ to configure packages.

#+begin_example elisp
(after! PACKAGE
    (setq x y))
#+end_example

The expection to this is paths to files/directories, doom variables (prepended with either ~doom~ or ~+~), and of course, variables that are explicitly required to be set up before loading their package.

Other useful macros (copy-pasted from the default config.el that comes with doom)

#+begin_example
 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
 etc).
#+end_example

** Basic configuration

*** Personal information

Some personal information is accesed by GPG configuration, emails clients, snippets, etc...
(This is optional)

#+begin_src elisp :tangle config.el
(setq user-full-name "Mateo Barria-Urenda"
      user-mail-address "mateobarria@gmail.com")
#+end_src

*** Fonts
I use the [[https://commitmono.com/][CommitMono]] font.

#+begin_src elisp :tangle config.el
;; Fonts
(setq doom-font (font-spec :family "CommitMono" :size 14) ; Primary font
      doom-variable-pitch-font (font-spec :family "DejaVu Sans" :size 15) ; non-monospace where applicable
      doom-unicode-font (font-spec :family "CommitMono") ; for unicode glyphs
      doom-serif-font (font-spec :family "CommitMono") ; for 'fixed-pitch-serif' face
      doom-big-font (font-spec :family "CommitMono" :size 24)) ; for big font mode ('SPC t b')
#+end_src
*** Theme
I *really* like the [[https://github.com/catppuccin/catppuccin][catppuccin]] theme.

#+begin_src elisp :tangle packages.el
(package! catppuccin-theme)
#+end_src

I use the frappe "flavor" of catppuccin.

#+begin_src elisp :tangle config.el
(setq catppuccin-flavor 'frappe) ;; 'frappe or 'latte, 'macchiato, or 'mocha
(setq doom-theme 'catppuccin)
#+end_src
**** Treemacs Colors
Set treemacs to use doom colors.
#+begin_src elisp :tangle config.el
(setq doom-themes-treemacs-theme "doom-colors")
#+end_src
**** hl-todo-mode
I like to highlight TODOs regardless of mode, so I can see comments that say TODO.
#+begin_src elisp :tangle config.el
(global-hl-todo-mode)
#+end_src

*** Modeline config
Doom's modeline exposes some configuration.
I change some defaults mostly because sometimes I use [[EXWM]] as my window manager and desktop environment.

#+begin_src elisp :tangle config.el
(display-battery-mode)
(display-time-mode)
(timeclock-mode-line-display)
#+end_src
*** Line Numbers
I use absolute line numbers by default, as I jump to lines using ~numpad+G~.

#+begin_src elisp :tangle config.el
(setq display-line-numbers-type t)
#+end_src

Line numbers can be turned off or switched to relative numbers (for easier navigation with ~number+jk~) by setting ~display-line-numbers~ to ~nil~ or ~relative~, respectively.

*** Splash Image
For now I'm using the cover of Zutomayo's [[https://en.wikipedia.org/wiki/Tadashii_Itsuwari_Kara_no_Kish%C5%8D][Tadashii Itsuwari Kara no Kishō]] album, with the blue set to transparent.

#+begin_src elisp :tangle config.el
(setq fancy-splash-image (concat doom-user-dir "ZTMY.png"))
#+end_src
** TODO Org-mode
*** TODO Org Config
I keep my org files in my Dropbox folder, which I always keep or link to in my home directory.
In it, in keep most transient notes in an ~!nbox~ file. (The ! helps keep it on top of sorts by name)
#+begin_src elisp :tangle config.el
(setq org-directory "~/Dropbox/org/")
(setq +org-capture-todo-file (doom-path org-directory "!nbox.org"))
#+end_src

*** TODO Org-roam
*** TODO Bibliograhy
I try to keep an organised bibliography using Org Babel.
And I want access in Emacs to the .bib entries tangled from it.
Citar lets me acces my bibiography from anywhere.
It also lets me access notes (~citar-open-notes~), pdfs (~citar-open-files~), and the bibtex entry themselves (~citar-open-entry~).

Doom's biblio module already binds some functions, but I found that opening files and inserting citations (which works both in org-mode and TeX mode) were some glaring omissions. Here I also set up my bibliography files that I want to be able to access anywhere.
The "reference" folder is mostly set up as a fallback. I try to keep my notes in a single Bibliography.org file.

#+begin_src elisp :tangle config.el
(require 'oc-bibtex)
(after! citar
        (setq! citar-bibliography '(
                                        "/home/mbarria/Dropbox/org/Bib/nanotubes.bib"
                                        "/home/mbarria/Dropbox/org/Bib/graphene.bib"
                                        "/home/mbarria/Dropbox/org/Bib/nano_other.bib"
                                        "/home/mbarria/Dropbox/org/Bib/md_software.bib"
                                        "/home/mbarria/Dropbox/org/Bib/md_theory.bib"
                                        ))
        (setq org-cite-global-bibliography citar-bibliography)
        (setq! citar-library-paths '("/home/mbarria/Dropbox/org/roam/pdfs/"))
        (setq! citar-notes-paths '("/home/mbarria/Dropbox/org/roam/reference/"))
        (setq! citar-library-file-extensions  (list "pdf"))
        (map! :map doom-leader-notes-map
                :desc "Insert Citation" "p" 'citar-insert-citation
                :desc "Open File" "P" 'citar-open-files)
)
#+end_src

I also keep a longer Bibliography file which I want to access in my LaTeX projects, so I make sure reftex knows about it.

#+begin_src elisp :tangle config.el
(after! reftex
  (setq! reftex-default-bibliography '("/home/mbarria/Dropbox/org/Bibliography.bib"))
  )
#+end_src
** TODO Ligatures
*** TODO Julia

** TODO Ledger
** TODO mu4e
* Packages

** Spotify

Possibly peak "I don't want to leave Emacs" for me is controlling Spotify.
These's multiple packages that do this, but I use SnootierMoon's [[https://github.com/SnootierMoon/emacs-spotify][emacs-spotify]].
#+begin_src elisp :tangle packages.el
(package! spotify
  :recipe (:host github
           :repo "SnootierMoon/emacs-spotify"))
#+end_src
Which I bind to it's own prefix map after the Doom leader.
#+begin_src elisp :tangle config.el
(map! :leader
      (:prefix-map ("S" . "Spotify")
       :desc "START"    "s" 'spotify-start
       :desc "Play"     "j" 'spotify-play
       :desc "Pause"    "k" 'spotify-pause
       :desc "Next"     "l" 'spotify-next
       :desc "Previous" "h" 'spotify-prev
       ))
#+end_src
** Pueue
[[https://github.com/Nukesor/pueue][Pueue]] is a super useful tool for running data analysis and other long processes.
I find it very useful to open and add to the queue from Emacs, particularly when working with python/julia scripts.
#+begin_src elisp :tangle packages.el
(package! pueue
  :recipe (:host github
           :repo "xFA25E/pueue"))
#+end_src
I add a binding to the open map too see how everything is doing, and another to the code map to easily add scripts I'm looking at to the queue.
#+begin_src elisp :tangle config.el
;; Pueue
(map! :map doom-leader-open-map
      :desc "Pueue"     "q" 'pueue
      )
(map! :map doom-leader-code-map
      :desc "Add to Pueue"     "q" 'pueue-add
      )
#+end_src
** TODO Elfeed
** Beacon
A small but powerfull change: a big beacon of light whenever you switch windows/buffers.
#+begin_src elisp :tangle packages.el
(package! beacon)
#+end_src
Of course, I ant it to be always active.
#+begin_src elisp :tangle config.el
(use-package! beacon
  :config (beacon-mode 1))
#+end_src
** Nyan-mode
Add a bit of life to the modeline.
#+begin_src elisp :tangle packages.el
(package! nyan-mode)
#+end_src

#+begin_src elisp :tangle config.el
(use-package! nyan-mode
  :after doom-modeline
  :config
  (setq nyan-bar-length 15
        nyan-wavy-trail t)
  (nyan-mode)
  (nyan-start-animation))
#+end_src
** TODO EXWM
*** TODO randr
